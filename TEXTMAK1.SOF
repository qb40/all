'Mouse Routines
DECLARE FUNCTION mouse.init% ()
DECLARE SUB mouse.show ()
DECLARE SUB mouse.hide ()
DECLARE SUB mouse.setrange (x1%, y1%, x2%, y2%)
DECLARE SUB mouse.put (x%, y%)
DECLARE SUB mouse.status ()

'Common usage routines
DECLARE FUNCTION c.loadstring$ (fl1$)
DECLARE SUB c.writestring (x%, y%, s1$)
DECLARE SUB c.getarea (x1%, y1%, x2%, y2%, Free$)
DECLARE SUB c.putarea (x%, y%, Free$)
DECLARE SUB c.drawbox (x1%, y1%, x2%, y2%, char%, attr%)
DECLARE FUNCTION c.stringcount% (data$, find%)
DECLARE FUNCTION c.input$ (x%, y%, tell$, leng%, word$)
DECLARE SUB c.clearkey ()
DECLARE SUB c.showcursor ()
DECLARE SUB c.hidecursor ()
DECLARE SUB c.boxcursor ()
DECLARE SUB c.cursorpos ()

'Sound making routines
DECLARE SUB snd.click ()
DECLARE SUB snd.click1 ()

'Window drawing routines
DECLARE FUNCTION win.window$ (x%, y%, inf$)
DECLARE SUB win.menus ()
DECLARE FUNCTION win.menu$ ()

'Software routines
DECLARE SUB sof.arrange ()
DECLARE SUB sof.message (msg$)
DECLARE SUB sof.infini ()
DECLARE SUB sof.ini (file$, total%, current%, TextSize%, position%, author$)
DECLARE SUB sof.scroll ()
DECLARE SUB sof.bar (Textno&, row%)
DECLARE SUB sof.saveram (file%)
DECLARE SUB sof.determine (file%)
DECLARE SUB sof.display (file%)
DECLARE SUB sof.findrow (file%)

'String file handling routines
DECLARE SUB str.append (file%, char$)
DECLARE SUB str.backspc (file%)
DECLARE SUB str.fullappend (file%, strings$)
DECLARE SUB str.fullbackspc (file%, howmuch%)
DECLARE SUB str.change (file%, position%, char$)
DECLARE SUB str.delete (file%, position%, howmuch%)
DECLARE SUB str.insert (file%, position%, insert$)
DECLARE SUB str.set (file%, strings$)
DECLARE FUNCTION str.get$ (file%, position%, howmuch%)
DECLARE SUB str.savetorat (filestr%, filerat%, text%)
DECLARE FUNCTION str.length% (file%)

'RAT file handling
DECLARE FUNCTION rat.readtext$ (file%, text&)
DECLARE SUB rat.changetext (file%, text&, text$)
DECLARE SUB rat.addtext (file%)
DECLARE SUB rat.fulladdtext (file%, howmuch%)
DECLARE SUB rat.removetext (file%)
DECLARE SUB rat.fullremovetext (file%, howmuch%)
DECLARE SUB rat.fileupdate (file%)
DECLARE SUB rat.inserttext (file%, text%)
DECLARE SUB rat.deletetext (file%, text%)

'Zap the error...
DECLARE SUB zap.error ()

'Declaring Keys
CONST backspc = 8, enter = 13, htab = 9, esc = 27
CONST left = 75, right = 77, up = 72, down = 80
CONST uplt = 71, uprt = 73, dnlt = 79, dnrt = 81
CONST insert = 82, home = 73, pageup = 71, del = 83, endk = 81, pagedn = 79
CONST kf1 = 59, kf2 = 60, kf3 = 61, kf4 = 62, kf5 = 63, kf6 = 64, kf7 = 65, kf8 = 66, kf9 = 67, kf10 = 68, kf11 = 133, kf12 = 134
'Keys declared

'Getting Initial Requirements
Engine$ = c.loadstring$("Engine.dll")
DIM Jerry%(5)
DIM Menu$(2, 6), Menu%(UBOUND(Menu$, 1))
FOR i% = 0 TO UBOUND(Menu$, 1)
FOR j% = 0 TO UBOUND(Menu$, 2)
READ Menu$(i%, j%)
NEXT
NEXT

CLS
sof.arrange
win.menus
mouse.show
mouse.put 0, 0
sof.message "I am here"
sof.infini
sof.ini "abc.abc", 1, 1, 1, 1, "Hello world"
FileName$ = ""
CursorRow& = 1
CursorColumn& = 1
CursorX% = 1
CursorY% = 1
WriteMode% = 0
c.showcursor
c.cursorpos
OPEN "B", #1, "zzzzzzzy.ini"
CurrentString% = 1
DO
'Get Input
        k$ = ""
        c.clearkey
        WHILE k$ = "" AND Jerry%(2) = 0 AND Jerry%(3) = 0 AND Jerry%(4) = 0 AND Jerry%(5) = 0
        k$ = INKEY$
        mouse.status
        WEND

k% = ASC(k$)
SELECT CASE k%
CASE IS >= 32 AND k% <= 126
GOSUB men.character

CASE ELSE
END SELECT
LOOP



'Initialize the file so that it contains just one null text block
men.initfile:
OPEN "O", #RatFile%, "zzzzzzzz.ini"
CLOSE #RatFile%
OPEN "B", #RatFile%, "zzzzzzzz.ini"
MenVar1$ = CHR$(1) + CHR$(0) + CHR$(7) + STRING$(5, 0)
PUT #RatFile%, 1, MenVar1$
RETURN

men.character:
c.writestring CursorX% + 3, CursorY% + 1, CHR$(&HF) + k$ + CHR$(0)
str.append CurrentString%, k$
CursorX% = CursorX% + 1
IF (CursorX% > 74) THEN
        CursorX% = 1
        CursorY% = CursorY% + 1
        IF (CursorY% > 18) THEN
        CursorY% = 18
        Jerry%(0) = 79
        Jerry%(1) = 20
        Jerry%(4) = 1
        sof.scroll
        END IF
END IF
RETURN




'Data required for drawing the menus
DATA " File ","New TEX File  ","Open TEX File ","Open TXT File ","Save          ","Save As       ","Exit          "
DATA " Edit ","Cut            ","Copy           ","Paste          ","Select text no ","Options        ",""
DATA " Help ","User Help ","Version   ","","","","",""

SUB c.boxcursor
SHARED Engine$
CALL absolute(SADD(Engine$) + 478)
END SUB

SUB c.clearkey
DEF SEG = 0               'stop beep sound
POKE &H41A, PEEK(&H41C)   '(by clearing keyboard buffer)
DEF SEG                   '(Qbasic tip)
END SUB

SUB c.cursorpos
SHARED CursorX%, CursorY%, Engine$
LOCATE CursorY% + 2, CursorX% + 4
'CALL absolute(BYVAL CursorX% + 3, BYVAL CursorY% + 1, BYVAL 7, SADD(Engine$) + 486)
END SUB

SUB c.drawbox (x1%, y1%, x2%, y2%, char%, attr%)
SHARED Engine$
CALL absolute(BYVAL x1%, BYVAL y1%, BYVAL x2%, BYVAL y2%, BYVAL char%, BYVAL attr%, SADD(Engine$) + 395)
END SUB

SUB c.getarea (x1%, y1%, x2%, y2%, Free$)
SHARED Engine$
CALL absolute(BYVAL x1%, BYVAL y1%, BYVAL x2%, BYVAL y2%, BYVAL VARSEG(Free$), BYVAL SADD(Free$), SADD(Engine$) + 206)
END SUB

SUB c.hidecursor
SHARED Engine$
CALL absolute(SADD(Engine$) + 471)
END SUB

FUNCTION c.input$ (x%, y%, tell$, leng%, word$)
c.writestring x%, y%, tell$ + CHR$(0)
a1$ = LEFT$(tell$, 1)
a2$ = CHR$((ASC(a1$) AND &HF0) OR (NOT (ASC(a1$)) AND &HF))
x1% = x% + LEN(tell$) - 1
x2% = x1% + leng% - 1
c.writestring x1%, y%, a1$ + word$ + SPACE$(leng% + 1 - LEN(word$)) + CHR$(0)
cursor% = x1% + LEN(word$)
cursorcount% = 0
cursorstate% = 0
DO
c.clearkey
k$ = ""
        WHILE k$ = "" AND Jerry%(2) = 0 AND Jerry%(3) = 0
        mouse.status
        k$ = INKEY$
        cursorcount% = cursorcount% + 1
        IF (cursorcount% = 32767) THEN
        cursorcount% = 0
        cursorstate% = (cursorstate% + 1) MOD 4
        SELECT CASE cursorstate%
        CASE 0
        c.writestring cursor%, y%, a2$ + " " + CHR$(0)
        CASE 1
        c.writestring cursor%, y%, a2$ + "ß" + CHR$(0)
        CASE 2
        c.writestring cursor%, y%, a2$ + "Ü" + CHR$(0)
        CASE 3
        c.writestring cursor%, y%, a2$ + CHR$(22) + CHR$(0)
        CASE ELSE
        END SELECT
        END IF
        WEND
k% = ASC(k$)
SELECT CASE k%
CASE esc
word$ = ""
c.writestring x1%, y%, a1$ + STRING$(leng% + 1, "Û") + CHR$(0)
snd.click
c.writestring x1%, y%, a1$ + STRING$(leng% + 1, "²") + CHR$(0)
snd.click
c.writestring x1%, y%, a1$ + STRING$(leng% + 1, "±") + CHR$(0)
snd.click
c.writestring x1%, y%, a1$ + STRING$(leng% + 1, "°") + CHR$(0)
snd.click
c.writestring x1%, y%, a1$ + SPACE$(leng% + 1) + CHR$(0)
cursor% = x1%
CASE backspc
IF (word$ <> "") THEN
word$ = LEFT$(word$, LEN(word$) - 1)
cursor% = cursor% - 1
c.writestring cursor%, y%, a1$ + CHR$(8) + " " + CHR$(0)
snd.click
c.writestring cursor%, y%, a1$ + CHR$(7) + CHR$(0)
ELSE
c.writestring cursor%, y%, a1$ + "®" + CHR$(0)
snd.click
c.writestring cursor%, y%, a1$ + "¯" + CHR$(0)
snd.click
END IF
CASE IS >= 32 AND k% <= 126
IF (LEN(word$) < leng%) THEN
word$ = word$ + k$
c.writestring cursor%, y%, a1$ + k$ + CHR$(0)
cursor% = cursor% + 1
ELSE
c.writestring cursor%, y%, a1$ + "¯" + CHR$(0)
snd.click
c.writestring cursor%, y%, a1$ + "®" + CHR$(0)
snd.click
END IF
CASE enter
c.writestring cursor%, y%, a1$ + " " + CHR$(0)
EXIT DO
CASE ELSE
END SELECT
IF (Jerry.lb = 1 OR Jerry.rb = 1) THEN
c.writestring cursor%, y%, a1$ + " " + CHR$(0)
EXIT DO
END IF

LOOP
c.input$ = word$
END FUNCTION

FUNCTION c.loadstring$ (fl1$)
fr% = FREEFILE
OPEN "B", #fr%, fl1$
c.loadstring$ = INPUT$(LOF(fr%), #fr%)
CLOSE #fr%
END FUNCTION

SUB c.putarea (x%, y%, Free$)
SHARED Engine$
CALL absolute(BYVAL x%, BYVAL y%, BYVAL VARSEG(Free$), BYVAL SADD(Free$), SADD(Engine$) + 288)
END SUB

SUB c.showcursor
SHARED Engine$
CALL absolute(SADD(Engine$) + 463)
END SUB

FUNCTION c.stringcount% (data$, find%)
SHARED Engine$
CALL absolute(BYVAL VARSEG(c.stringcount%), BYVAL VARPTR(c.stringcount%), BYVAL VARSEG(data$), BYVAL SADD(data$), BYVAL find%, BYVAL LEN(data$), SADD(Engine$) + 354)
END FUNCTION

SUB c.writestring (x%, y%, s1$)
SHARED Engine$
CALL absolute(BYVAL x%, BYVAL y%, BYVAL VARSEG(s1$), BYVAL SADD(s1$), SADD(Engine$) + 152)
END SUB

SUB mouse.hide
SHARED Engine$
CALL absolute(SADD(Engine$) + 26)
END SUB

FUNCTION mouse.init%
SHARED Engine$
CALL absolute(BYVAL VARSEG(mouse.init%), BYVAL VARPTR(mouse.init%), SADD(Engine$))
END FUNCTION

SUB mouse.put (x%, y%)
SHARED Engine$
CALL absolute(BYVAL x% * 8, BYVAL y% * 8, SADD(Engine$) + 61)
END SUB

SUB mouse.setrange (x1%, y1%, x2%, y2%)
SHARED Engine$
CALL absolute(BYVAL x1% * 8, BYVAL y1% * 8, BYVAL x2% * 8, BYVAL y2% * 8, SADD(Engine$) + 32)
END SUB

SUB mouse.show
SHARED Engine$
CALL absolute(SADD(Engine$) + 20)
END SUB

SUB mouse.status
SHARED Engine$, Jerry%()
CALL absolute(BYVAL VARSEG(Jerry%(0)), BYVAL VARPTR(Jerry%(0)), SADD(Engine$) + 79)
Jerry%(0) = Jerry%(0) \ 8
Jerry%(1) = Jerry%(1) \ 8
END SUB

SUB rat.addtext (file%)
SHARED ActiveText%, Errors%
SEEK #file%, 1
ActiveText% = CVI(INPUT$(2, #file%))
IF (ActiveText% = 32767) THEN
Errors% = 7
ELSE
ActiveText% = ActiveText% + 1
write$ = MKI$(ActiveText%)
PUT #file%, 1, write$
pos1& = 3 + 4 * CLNG(ActiveText% - 2)
SEEK #file%, pos1&
pos1& = CVL(INPUT$(4, #file%))
SEEK #file%, pos1&
pos1& = pos1& + 2 + CLNG(CVI(INPUT$(2, #file%)))
write$ = CHR$(0) + CHR$(0)
PUT #file%, pos1&, write$
END IF
END SUB

SUB rat.changetext (file%, text%, text$)
SEEK #file%, 3 + (text% - 1) * 4
pos1& = CVL(INPUT$(4, #file%))
SEEK #file%, pos1&
len1% = CVI(INPUT$(2, #file%))
change% = LEN(text$) - len1%
SELECT CASE SGN(change%)
'Shift data down
CASE 1
pos2& = LOF(file%) + 1
pos3& = pos2& + change%
DO
SEEK #file%, 3 + text% * 4
copyend& = CVL(INPUT$(4, #file%))
pos3& = pos3& - 5000
pos2& = pos2& - 5000
copylen& = 5000
IF (pos2& < copyend&) THEN
        copylen& = copyend& - pos2&
        pos3& = pos3& + copylen&
        pos2& = copyend&
END IF
SEEK #file%, pos2&
copy$ = INPUT$(copylen&, #file%)
PUT #file%, pos3&, copy$
LOOP WHILE pos2& > copyend&
'Shift data up
CASE -1
SEEK #file%, 3 + text% * 4
pos2& = CVL(INPUT$(4, #file%))
pos3& = pos2& + change%
copyend& = LOF(file%) + 1
DO
copylen& = 5000
IF (pos2& + copylen& > copyend&) THEN copylen& = copyend& - pos2&
SEEK #file%, pos2&
copy$ = INPUT$(copylen&, #file%)
PUT #file%, pos3&, copy$
pos2& = pos2& + 5000
pos3& = pos3& + 5000
LOOP WHILE pos2& < copyend&
CASE ELSE
END SELECT
'ChangeText
copy$ = MKI$(LEN(text$)) + text$
PUT #file%, pos1&, copy$
'Change addresses
SEEK #file%, 1
len1% = CVI(INPUT$(2, #file%))
pos2& = 3 + text% * 4
change% = len1% - text%
FOR i% = 1 TO change%
SEEK #file%, pos2&
pos3& = CVL(INPUT$(4, #file%))
copy$ = MKL$(pos3& + change%)
PUT #file%, pos2&, copy$
pos2& = pos2& + 4
NEXT
END SUB

SUB rat.deletetext (file%, text%)
SHARED ActiveText%, Errors%
SEEK #file%, 1
Text1% = CVI(INPUT$(2, #file%))
SourceE& = 3 + 4 * text%
SEEK #file%, SourceE&
SourceE& = CVL(INPUT$(4, #file%))
Source& = 3 + 4 * text%
FOR i& = text% + 1 TO Text1%
SEEK #file%, Source&
read$ = MKL$(CVL(INPUT$(4, #file%)) - 6)
PUT #file%, Source&, read$
Source& = Source& + 4
NEXT
Source& = 3 + 4 * text%
Destination& = Source& - 4
copypos& = 3 + 4 * Text1%
bytestocopy& = copypos& - Source&
FOR i& = 1 TO bytestocopy& \ 5000
SEEK #file%, Source&
read$ = INPUT$(5000, #file%)
PUT #file%, Destination&, read$
Source& = Source& + 5000
Destination& = Destination& + 5000
NEXT
SEEK #file%, Source&
read$ = INPUT$(bytestocopy& MOD 5000, #file%)
PUT #file%, Destination&, read$
Text1% = Text1% - 1
copypos& = 3 + 4 * CLNG(Text1% - 1)
SEEK #file%, copypos&
copypos& = copypos& + 2 + CLNG(CVI(INPUT$(2, #file%)))
Source& = SourceE&
Destination& = Source& - 6
copypos& = 3 + 4 * CLNG(text%)
bytestocopy& = Source& - copypos&
FOR i& = 1 TO bytestocopy& \ 5000
Source& = Source& - 5000
Destination& = Destination& - 5000
SEEK #file%, Source&
read$ = INPUT$(5000, #file%)
PUT #file%, Destination&, read$
NEXT
a1& = bytestocopy& MOD 5000
Source& = Source& - a1&
Destination& = Destination& - a1&
SEEK #file%, Source&
read$ = INPUT$(5000, #file%)
PUT #file%, Destination&, read$
END IF
END SUB

SUB rat.fileupdate (file%)
SEEK #file%, 1
text% = CVI(INPUT$(2, #file%))
copypos& = 3 + 4 * (text% - 1)
SEEK #file%, copypos&
text% = CVI(INPUT$(2, #file%))
copypos& = copypos& + 1 + CLNG(text%)
fr% = FREEFILE
OPEN "O", #fr%, "zzzzzzzx.ini"
CLOSE #fr%
OPEN "B", #fr%, "zzzzzzzx.ini"
pos1& = 1
SEEK #file%, pos1&
FOR i& = 1 TO copypos& \ 5000
read$ = INPUT$(5000, #file%)
PUT #fr%, pos1&, read$
pos1& = pos1& + 5000
NEXT
read$ = INPUT$(copypos& MOD 5000, #file%)
PUT #fr%, pos1&, read$
CLOSE #fr%
CLOSE #file%
KILL "zzzzzzzz.ini"
SHELL "ren zzzzzzzx.ini zzzzzzzz.ini"
file% = FREEFILE
OPEN "B", #file%, "zzzzzzzz.ini"
END SUB

SUB rat.fulladdtext (file%, howmuch%)
SHARED ActiveText%, Errors%
SEEK #file%, 1
ActiveText% = CVI(INPUT$(2, #file%))
IF (CLNG(ActiveText%) + CLNG(howmuch%) > 32767) THEN
Errors% = 8
ELSE
pos1& = 3 + CLNG(ActiveText% - 1) * 4
SEEK #file%, pos1&
pos1& = pos1& + 2 + CLNG(CVI(INPUT$(2, #file%)))
write$ = CHR$(0) + CHR$(0)
FOR i% = 1 TO howmuch%
PUT #file%, pos1&, write$
pos1& = pos1& + 2
NEXT
ActiveText% = ActiveText% + howmuch%
write$ = MKI$(ActiveText%)
PUT #file%, 1, write$
END IF
END SUB

SUB rat.fullremovetext (file%, howmuch%)
SHARED ActiveText%, Errors%
SEEK #file%, 1
ActiveText% = CVI(INPUT$(2, #file%))
IF (ActiveText% - howmuch% < 1) THEN
Errors% = 10
ELSE
ActiveText% = ActiveText% - howmuch%
write$ = MKI$(ActiveText%)
PUT #file%, 1, write$
END IF
END SUB

SUB rat.inserttext (file%, text%)
SHARED ActiveText%, Errors%
SEEK #file%, 1
Text1% = CVI(INPUT$(2, #file%))
IF (Text1% = 32767) THEN
Errors% = 11
ELSE
ActiveText% = text%
Source& = 3 + 4 * CLNG(Text1% - 1)
SEEK #file%, Source&
Source& = Source& + 2 + CLNG(CVI(INPUT$(2, #file%)))
Destination& = 6 + Source&
copypos& = 3 + 4 * (text% - 1)
bytestocopy& = Source& - copypos&
FOR i& = 1 TO bytestocopy& \ 5000
Source& = Source& - 5000
Destination& = Destination& - 5000
SEEK #file%, Source&
read$ = INPUT$(5000, #file%)
PUT #file%, Destination&, read$
NEXT
a1& = bytestocopy& MOD 5000
Source& = Source& - a1&
Destination& = Destination& - a1&
SEEK #file%, Source&
read$ = INPUT$(a1&, #file%)
PUT #file%, Destination&, read$
read$ = CHR$(0) + CHR$(0)
PUT #file%, copypos& + 4, read$
Source& = copypos&
Destination& = 4 + Source&
copypos& = 3 + 4 * (text% - 1)
bytestocopy& = Source& - copypos&
FOR i& = 1 TO bytescopy& \ 5000
Source& = Source& - 5000
Destination& = Destination& - 5000
SEEK #file%, Source&
read$ = INPUT$(5000, #file%)
PUT #file%, Destination&, read$
NEXT
a1& = bytestocopy& MOD 5000
Source& = Source& - a1&
Destination& = Destination& - a1&
SEEK #file%, Source&
read$ = INPUT$(a1&, #file%)
PUT #file%, Destination&, read$
SEEK #file%, copypos& + 4
Source& = CVL(INPUT$(4, #file%)) - 2
read$ = MKL$(Source&)
PUT #file%, copypos&, read$
Source& = copypos& + 4
FOR i% = 0 TO Text1% - text%
SEEK #file%, Source&
read$ = MKL$(CVL(INPUT$(4, #file%)) + 2)
PUT #file%, Source&, read$
Source& = Source& + 4
NEXT
Text1% = Text1% + 1
read$ = MKI$(Text1%)
PUT #file%, 1, read$
END IF
END SUB

FUNCTION rat.readtext$ (file%, text&)
pos1& = 3 + ((text& - 1) * 4)
SEEK #file%, pos1&
pos1& = CVL(INPUT$(4, #file%)) + 1
SEEK #file%, pos1&
Length% = CVI(INPUT$(2, #file%))
k$ = INPUT$(Length%, #file%)
sof.readtext$ = k$
END FUNCTION

SUB rat.removetext (file%)
SHARED ActiveText%, Errors%
SEEK #file%, 1
ActiveText% = CVI(INPUT$(2, #file%))
IF (ActiveText% = 1) THEN
Errors% = 9
ELSE
ActiveText% = ActiveText% - 1
write$ = MKI$(ActiveText%)
PUT #file%, 1, write$
END IF
END SUB

SUB snd.click
FOR i% = 5000 TO 7000 STEP 500
SOUND i%, .05
SOUND i% + 2, .05
SOUND i% + 4, .05
SOUND i% + 6, .05
NEXT
END SUB

SUB snd.click1
FOR i% = 5000 TO 7000 STEP 1000
SOUND i%, .05
SOUND i% + 1, .05
SOUND i% + 2, .05
SOUND i% + 3, .05
NEXT
END SUB

SUB sof.arrange
'½¼»º¹¸·¶µ´³¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ÚÙ
'Menu
c.writestring 0, 0, "0" + SPACE$(80) + CHR$(0)
'Tools
FOR i% = 2 TO 19
c.writestring 0, i%, CHR$(&H50) + "   " + CHR$(0)
NEXT
'Text Area
c.writestring 3, 1, CHR$(14) + "É" + STRING$(74, "Í") + "»" + CHR$(0)
FOR i% = 2 TO 19
c.writestring 3, i%, CHR$(14) + "º" + CHR$(0)
c.writestring 78, i%, CHR$(14) + "º" + CHR$(0)
NEXT
c.writestring 3, 20, CHR$(14) + "È" + STRING$(74, "Í") + "¼" + CHR$(0)
'Scroll
'updn
c.writestring 79, 1, CHR$(&H60) + CHR$(24) + CHR$(0)
FOR i% = 2 TO 19
c.writestring 79, i%, CHR$(&H78) + "º" + CHR$(0)
NEXT
c.writestring 79, 20, CHR$(&H60) + CHR$(25) + CHR$(0)
'ltrt
c.writestring 3, 21, CHR$(&H60) + CHR$(27) + CHR$(0)
c.writestring 4, 21, CHR$(&H78) + STRING$(74, "Í") + CHR$(0)
c.writestring 78, 21, CHR$(&H60) + CHR$(26) + CHR$(0)
'Message
c.writestring 0, 20, CHR$(2) + "ÚÄ¿" + CHR$(0)
FOR i% = 21 TO 23
c.writestring 0, i%, CHR$(2) + "ÃÄ´" + CHR$(0)
NEXT
c.writestring 1, 21, CHR$(&H3C) + CHR$(127) + CHR$(0)
c.writestring 0, 24, CHR$(2) + "ÀÄÁ" + STRING$(76, "Ä") + "Ù" + CHR$(0)
c.writestring 2, 21, CHR$(2) + "Å" + STRING$(76, "Ä") + "¿" + CHR$(0)
c.writestring 79, 22, CHR$(2) + "³" + CHR$(0)
c.writestring 79, 23, CHR$(2) + "³" + CHR$(0)
c.drawbox 3, 22, 78, 23, 0, &H20
END SUB

SUB sof.bar (Textno&, row%)
a1$ = STR$(Textno&)
c.writestring 4, row% + 1, CHR$(&H7C) + "°°°Text Number :" + a1$ + STRING$(58 - LEN(a1$), "°") + CHR$(0)
END SUB

SUB sof.determine (file%)
SHARED TotalRow&, TotalColumn&
TotalColumn& = 74
TotalRow& = LOF(file%) \ 76 + ((LOF(file%) MOD 76 <> 0) + 1)
END SUB

SUB sof.display (file%)
SHARED ActiveRow&, TotalRow&
'Rows possible in screen = 18
pos1& = 6 + 80 * (ActiveRow& - 1)
loaf& = LOF(file%)
FOR i% = 2 TO 19
SEEK #file%, pos1&
c.writestring 4, i%, INPUT$(75, #file%) + CHR$(0)
pos1& = pos1& + 80
IF (pos1& > loaf&) THEN EXIT FOR
NEXT
WHILE i% <= 19
c.writestring 4, i%, STRING$(76, 0)
i% = i% + 1
WEND
END SUB

SUB sof.findrow (file%)
SHARED ActiveRow&, CursorRow&, CursorColumn&, CursorX%, CursorY%, Jerry%()
CursorRow& = ActiveRow& + CLNG(Jerry%(1) - 3)
SEEK #file%, 1 + 80 * (CursorRow& - 1)
reads% = ASC(INPUT$(1, #file%))
SELECT CASE reads%
CASE 1
CursorRow& = CursorRow& + 2
CASE 2
CursorRow& = CursorRow& + 1
CASE 3
CursorRow& = CursorRow& - 1
CASE 4
CursorRow& = -1
CASE ELSE
END SELECT
CursorColumn& = Jerry%(0) - 3
IF (reads% >= 5 AND Jerry%(0) > reads% - 2) THEN CursorColumn& = reads% - 5
CursorX% = CINT(CursorColumn&)
CursorY% = CINT(CursorRow& - ActiveRow&) + 1
END SUB

SUB sof.infini
mouse.hide
c.drawbox 3, 22, 78, 23, 0, &H20
c.writestring 3, 22, CHR$(&H21) + "File Name:____________" + CHR$(0)
c.writestring 33, 22, CHR$(&H21) + "Total Text:_____" + CHR$(0)
c.writestring 53, 22, CHR$(&H21) + "Current Text:_____" + CHR$(0)
c.writestring 3, 23, CHR$(&H21) + "Text size:_____" + CHR$(0)
c.writestring 33, 23, CHR$(&H21) + "Position:_____" + CHR$(0)
c.writestring 53, 23, CHR$(&H21) + "Author:_________________" + CHR$(0)
mouse.show
END SUB

SUB sof.ini (file$, total%, current%, TextSize%, position%, author$)
c.writestring 13, 22, CHR$(&H21) + file$ + STRING$(12 - LEN(file$), "_") + CHR$(0)
a1$ = RTRIM$(LTRIM$(STR$(total%)))
c.writestring 44, 22, CHR$(&H21) + a1$ + STRING$(5 - LEN(a1$), "_") + CHR$(0)
a1$ = RTRIM$(LTRIM$(STR$(current%)))
c.writestring 66, 22, CHR$(&H21) + a1$ + STRING$(5 - LEN(a1$), "_") + CHR$(0)
a1$ = RTRIM$(LTRIM$(STR$(TextSize%)))
c.writestring 13, 23, CHR$(&H21) + a1$ + STRING$(5 - LEN(a1$), "_") + CHR$(0)
a1$ = RTRIM$(LTRIM$(STR$(position%)))
c.writestring 42, 23, CHR$(&H21) + a1$ + STRING$(5 - LEN(a1$), "_") + CHR$(0)
c.writestring 60, 23, CHR$(&H21) + author$ + STRING$(17 - LEN(author$), "_") + CHR$(0)
END SUB

SUB sof.message (msg$)
SHARED MessageTimer&
mouse.hide
c.writestring 3, 22, CHR$(0) + SPACE$(76) + CHR$(0)
c.writestring 3, 23, CHR$(0) + SPACE$(76) + CHR$(0)
IF (LEN(msg$) > 76) THEN
c.writestring 3, 22, CHR$(9) + LEFT$(msg$, 76) + CHR$(0)
c.writestring 3, 23, CHR$(9) + RIGHT$(msg$, LEN(msg$) - 76) + CHR$(0)
ELSE
c.writestring 3, 22, CHR$(9) + msg$ + CHR$(0)
END IF
MessageTimer& = 100000
mouse.show
END SUB

SUB sof.saveram (file%)
SEEK #file%, 1
maxtext& = CVL(INPUT$(2, #fr%) + CHR$(0) + CHR$(0))
'OverAll Line Length = 80 (with type and text no)
'Data Line Length = 75 (with attrib)
'Data Size = 74 (only text)
pos1& = 1
FOR i& = 1 TO maxtext&
number$ = MKL$(i&)
write$ = RTRIM$(LTRIM$(STR$(i&)))
write$ = CHR$(1) + number$ + CHR$(&H7C) + "°°°Text Number :" + write$ + STRING$(58 - LEN(write$), "°")
PUT #file%, pos1&, write$
pos1& = pos1& + 80
write$ = CHR$(2) + number$ + STRING$(75, 0)
PUT #file%, pos1&, write$
pos1& = pos1& + 80
string1$ = sof.readtext$(fr%, i&)
FOR i% = 1 TO LEN(string1$) \ 74
write$ = CHR$(0) + number$ + CHR$(&HF) + MID$(string1$, 1 + 74 * (i% - 1), 74)
PUT #file%, pos1&, write$
pos1& = pos1& + 80
NEXT
IF (LEN(string1$) MOD 74 <> 0) THEN
write$ = RIGHT$(string1$, LEN(string1$) MOD 74)
write$ = CHR$(5 + LEN(write$)) + number$ + CHR$(&HF) + write$ + STRING$(74 - LEN(write$), 0)
PUT #file%, pos1&, write$
pos1& = pos1& + 80
END IF
write$ = CHR$(3) + number$ + STRING$(75, 0)
PUT #file%, pos1&, write$
pos1& = pos1& + 80
NEXT
write$ = CHR$(4) + number$ + CHR$(&H6) + "Ú" + STRING$(72, "Ä") + "¿"
PUT #file%, pos1&, write$
pos1& = pos1& + 80
write$ = CHR$(4) + number$ + CHR$(&H6) + "³" + SPACE$(10) + "Best Wishes for your Game Designing" + SPACE$(10) + "-qbasic40" + SPACE$(8) + "³"
PUT #file%, pos1&, write$
pos1& = pos1& + 80
write$ = CHR$(4) + number$ + CHR$(&H6) + "À" + STRING$(72, "Ä") + "Ù"
PUT #file%, pos1&, write$
END SUB

SUB sof.scroll
SHARED ScrollBarx#, ScrollBary#, ActiveRow&, ActiveColumn&, TotalRow&, TotalColumn&, Jerry%()
IF (Jerry%(2) = 1 OR Jerry%(3) = 1) THEN
IF (Jerry%(0) = 79 OR Jerry%(1) = 21) THEN
IF (Jerry%(2) = 1) THEN rate% = 1
IF (Jerry%(3) = 1) THEN rate% = 5
IF (Jerry%(2) = 1 AND Jerry%(3) = 1) THEN rate% = 10
Scrollupdnstep# = (18# * rate%) / TotalRow&
Scrollltrtstep# = (74# * rate%) / TotalColumn&
'ScrollUp
IF (Jerry%(0) = 79 AND Jerry%(1) = 1) THEN
mouse.hide
c.writestring 79, 1 + CINT(ScrollBary#), CHR$(&H78) + "º" + CHR$(0)
ScrollBary# = ScrollBary# - Scrollupdnstep#
IF (ScrollBary# < 1) THEN ScrollBary# = 1
ActiveRow& = ActiveRow& - rat%
IF (ActiveRow& < 1) THEN ActiveRow& = 1
c.writestring 79, 1 + CINT(ScrollBary#), CHR$(&H7B) + "±" + CHR$(0)
mouse.show
END IF
'ScrollDown
IF (Jerry%(0) = 79 AND Jerry%(1) = 20) THEN
mouse.hide
c.writestring 79, 1 + CINT(ScrollBary#), CHR$(&H78) + "º" + CHR$(0)
ScrollBary# = ScrollBary# + Scrollupdnstep#
IF (ScrollBary# > 18) THEN ScrollBary# = 18
ActiveRow& = ActiveRow& + rat%
IF (ActiveRow& > TotalRow&) THEN ActiveRow& = TotalRow&
c.writestring 79, 2 + CINT(ScrollBary#), CHR$(&H7B) + "±" + CHR$(0)
mouse.show
END IF
'ScrollLeft
IF (Jerry%(0) = 3 AND Jerry%(1) = 21) THEN
mouse.hide
c.writestring 3 + CINT(ScrollBary#), 21, CHR$(&H78) + "Í" + CHR$(0)
ScrollBarx# = ScrollBarx# - Scrollltrtstep#
IF (ScrollBarx# < 1) THEN ScrollBarx# = 1
ActiveColumn& = ActiveColumn& - 1
IF (ActiveColumn& < 1) THEN ActiveColumn& = 1
c.writestring 3 + CINT(ScrollBarx#), 21, CHR$(&H7B) + "±" + CHR$(0)
mouse.show
END IF
'ScrollRight
IF (Jerry%(0) = 78 AND Jerry%(1) = 21) THEN
mouse.hide
c.writestring 3 + CINT(ScrollBary#), 21, CHR$(&H78) + "Í" + CHR$(0)
ScrollBarx# = ScrollBarx# + Scrollltrtstep#
IF (ScrollBarx# > 74) THEN ScrollBarx# = 74
ActiveColumn& = ActiveColumn& - 1
IF (ActiveColumn& > TotalColumn&) THEN ActiveColumn& = TotalColumn&
c.writestring 3 + CINT(ScrollBarx#), 21, CHR$(&H7B) + "±" + CHR$(0)
mouse.show
END IF
END IF
END IF
END SUB

SUB str.append (file%, char$)
SHARED TextSize%, Errors%
SEEK #file%, 1
TextSize% = CVI(INPUT$(2, #file%))
IF (TextSize% < 32767) THEN
TextSize% = TextSize% + 1
write$ = MKI$(TextSize%)
PUT #file%, 1, write$
PUT #file%, 2 + CLNG(TextSize%), char$
ELSE
Errors% = 1
END IF
END SUB

SUB str.backspc (file%)
SHARED TextSize%, Errors%
SEEK #file%, 1
TextSize% = CVI(INPUT$(2, #file%))
IF (TextSize% > 0) THEN
TextSize% = TextSize% - 1
write$ = MKI$(TextSize%)
PUT #file%, 1, write$
ELSE
Errors% = 2
END IF
END SUB

SUB str.change (file%, position%, char$)
PUT #file%, CLNG(position%) + 2, char$
END SUB

SUB str.delete (file%, position%, howmuch%)
SHARED TextSize%, Errors%
Destination& = CLNG(position%) + 2
Source& = Destination& + CLNG(howmuch%)
SEEK #file%, 1
TextSize% = CVI(INPUT$(2, #file%))
bytestocopy% = TextSize% - position% - howmuch% + 1
TextSize% = TextSize% - howmuch%
IF (TextSize% < 0) THEN
SEEK #file%, 1
TextSize% = CVI(INPUT$(2, #file%))
Errors% = 3
ELSE
FOR i% = 1 TO bytestocopy% \ 5000
SEEK #file%, Source&
read$ = INPUT$(5000, #file%)
PUT #file%, Destination&, read$
Source& = Source& + 5000
Destination& = Destination& + 5000
NEXT
SEEK #file%, Source&
read$ = INPUT$(bytestocpoy% MOD 5000, #file%)
PUT #file%, Destination&, read$
read$ = MKI$(TextSize%)
PUT #file%, 1, read$
END IF
END SUB

SUB str.fullappend (file%, strings$)
FOR i% = 1 TO LEN(strings$)
str.append file%, MID$(strings$, i%, 1)
NEXT
END SUB

SUB str.fullbackspc (file%, howmuch%)
FOR i% = 1 TO howmuch%
str.backspc file%
NEXT
END SUB

FUNCTION str.get$ (file%, position%, howmuch%)
SHARED TextSize%, Errors%
SEEK #file%, 1
TextSize% = CVI(INPUT$(2, #file%))
IF (position% > TextSize%) THEN
Errors% = 5
ELSEIF (CLNG(position%) + CLNG(howmuch%) - 1 > TextSize%) THEN
Errors% = 6
ELSE
SEEK #file%, CLNG(position%) + 2
str.get$ = INPUT$(howmuch%, #file%)
END IF
END FUNCTION

SUB str.insert (file%, position%, insert$)
SHARED TextSize%, Errors%
SEEK #file%, 1
TextSize% = CVI(INPUT$(2, #file%))
Source& = 3 + CLNG(TextSize%)
Destination& = Source& + LEN(insert$)
bytestocopy% = TextSize% - position% + 1
IF (CLNG(TextSize%) + LEN(insert$) > 32767) THEN
Errors% = 4
ELSE
TextSize% = TextSize% + LEN(insert$)
FOR i% = 1 TO bytestocopy% \ 5000
Source& = Source& - 5000
Destination& = Destination& - 5000
SEEK #file%, Source&
read$ = INPUT$(5000, #file%)
PUT #file%, Destination&, read$
NEXT
a1& = CLNG(bytestocopy% MOD 5000)
Source& = Source& - a1&
Destination& = Source& - a1&
SEEK #file%, Source&
read$ = INPUT$(a1&, #file%)
PUT #file%, Destination&, read$
read$ = MKI$(TextSize%)
PUT #file%, 1, read$
END IF
END SUB

FUNCTION str.length% (file%)
SEEK #file%, 1
str.length% = CVI(INPUT$(2, #file%))
END FUNCTION

SUB str.savetorat (filestr%, filerat%, text%)
SHARED ActiveText%, Errors%
'Save the string present in the string storage file to the RAT file
'to update it.
'
'Get the total text blocks present in the RAT file
SEEK #filerat%, 1
Text1% = CVI(INPUT$(2, #filerat%))
'If requested text block is greater than available then error!
IF (text% > Text1%) THEN
Errors% = 12
ELSE
'Change it quick...
SEEK #filestr%, 1
Text1% = CVI(INPUT$(2, #filestr%))
read$ = INPUT$(Text1%, filestr%)
rat.changetext filerat%, text%, read$
END IF
END SUB

SUB str.set (file%, strings$)
SHARED TextSize%
TextSize% = LEN(strings$)
write$ = MKI$(TextSize%)
PUT #file%, 1, write$
PUT #file%, 3, strings$
END SUB

FUNCTION win.menu$
SHARED Menu%(), Menu$(), Jerry%()
IF (Jerry%(1) <> 0) THEN GOTO menuend
IF (Jerry%(0) >= Menu%(UBOUND(Menu%))) THEN GOTO menuend
IF (Jerry%(3) = 0 AND Jerry%(4) = 0) THEN GOTO menuend
FOR i% = 0 TO UBOUND(Menu%)
IF (Jerry%(0) < Menu%(i%)) THEN
Menuselect% = i%
EXIT FOR
END IF
NEXT

mouse.hide
Menulen% = LEN(Menu$(Menuselect%, 0)) - 2
IF (Menuselect% = 0) THEN x1% = 0 ELSE x1% = Menu%(Menuselect% - 1)
c.writestring x1%, 0, "cº" + MID$(Menu$(Menuselect%, 0), 2, Menulen%) + "º" + CHR$(0)

a1% = 0
a2% = 0
FOR i% = 1 TO UBOUND(Menu$, 2)
IF (LEN(Menu$(Menuselect%, i%)) > a1%) THEN a1% = LEN(Menu$(Menuselect%, i%))
IF (LEN(Menu$(Menuselect%, i%)) > 0) THEN a2% = i%
NEXT
Xrange% = a1%
Yrange% = a2%
x2% = x1% + Xrange% + 1
y2% = Yrange% + 2
Store$ = SPACE$(500)
c.getarea x1%, 1, x2%, y2%, Store$
c.drawbox x1%, 1, x2%, y2%, 32, ASC("b")

c.writestring x1%, 1, "bÌ" + STRING$(Menulen%, "Í") + "Ê" + STRING$(Xrange% - Menulen% - 1, "Í") + "»" + CHR$(0)
FOR i% = 1 TO Yrange%
c.writestring x1%, 1 + i%, "bº" + CHR$(0)
c.writestring x1% + 1, 1 + i%, "y" + Menu$(Menuselect%, i%) + CHR$(0)
c.writestring x1% + 1 + LEN(Menu$(Menuselect%, i%)), 1 + i%, "bº" + CHR$(0)
NEXT
c.writestring x1%, Yrange% + 2, "bÈ" + STRING$(Xrange%, "Í") + "¼" + CHR$(0)
mouse.show

'Now, take input
Selects% = 1
DO
        k$ = ""
        c.clearkey
        mouse.status
        WHILE k$ = "" AND Jerry%(2) = 0 AND Jerry%(3) = 0 AND Jerry%(4) = 0 AND Jerry%(5) = 0
        k$ = INKEY$
        mouse.status
        WEND
'Select key
SELECT CASE k$
CASE CHR$(esc)
Selects% = 0
EXIT DO
CASE CHR$(0) + CHR$(up), CHR$(0) + CHR$(left)
mouse.hide
c.writestring x1% + 1, Selects% + 1, "y" + Menu$(Menuselect%, Selects%) + CHR$(0)
Selects% = Selects% - 1
IF (Selects% < 1) THEN Selects% = Yrange%
c.writestring x1% + 1, Selects% + 1, "k" + Menu$(Menuselect%, Selects%) + CHR$(0)
mouse.show
CASE CHR$(0) + CHR$(down), CHR$(0) + CHR$(right)
mouse.hide
c.writestring x1% + 1, Selects% + 1, "y" + Menu$(Menuselect%, Selects%) + CHR$(0)
Selects% = Selects% + 1
IF (Selects% > Yrange%) THEN Selects% = 1
c.writestring x1% + 1, Selects% + 1, "k" + Menu$(Menuselect%, Selects%) + CHR$(0)
mouse.show
CASE CHR$(enter)
EXIT DO
CASE ELSE
END SELECT

'Menu, go back
IF (Jerry%(1) = 0) THEN
IF (Jerry%(0) > x1% - 1 AND Jerry%(0) <= x1% + Menulen% + 1 AND Jerry%(4) = 1) THEN
Selects% = 0
EXIT DO
END IF
END IF

'Menu, select
IF (Jerry%(4) = 1) THEN
IF (Jerry%(0) > x1% AND Jerry%(0) < x2%) THEN
IF (Jerry%(1) > 1 AND Jerry%(1) < y2%) THEN
Selects% = Jerry%(1) - 1
EXIT DO
END IF
END IF
END IF
LOOP

mouse.hide
IF (Selects% <> 0) THEN c.writestring x1% + 1, Selects% + 1, "h" + Menu$(Menuselect%, Selects%) + CHR$(0)
snd.click
snd.click
c.drawbox x1%, 1, x2%, y2%, ASC("°"), ASC("j")
snd.click
c.drawbox x1%, 1, x2%, y2%, 0, 7
c.putarea x1%, 1, Store$
c.writestring x1%, 0, "0" + Menu$(Menuselect%, 0) + CHR$(0)
mouse.show
Menuselect% = Menuselect% + 1

menuend:
win.menu$ = CHR$(Menuselect%) + CHR$(Selects%)
END FUNCTION

SUB win.menus
SHARED Menu$(), Menu%()
x% = 0
FOR i% = 0 TO UBOUND(Menu$, 1)
c.writestring x%, 0, "0" + Menu$(i%, 0) + CHR$(0)
x% = x% + LEN(Menu$(i%, 0))
Menu%(i%) = x%
NEXT
END SUB

FUNCTION win.window$ (x%, y%, inf$)
SHARED Jerry%()

'½¼»º¹¸·¶µ´³¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ÚÙ
'Design window name
mouse.hide
'Get information
windowlength% = ASC(LEFT$(inf$, 1))
windowheight% = ASC(MID$(inf$, 2, 1))
inf$ = RIGHT$(inf$, LEN(inf$) - 2)
Store$ = SPACE$(2000)
a1$ = LEFT$(inf$, INSTR(inf$, "|") - 1)
inf$ = RIGHT$(inf$, LEN(inf$) - LEN(a1$) - 1)
a2$ = LEFT$(a1$, 1)
a3$ = MID$(a1$, 2, 1)
a1$ = RIGHT$(a1$, LEN(a1$) - 2)
c.getarea x%, y%, x% + windowlength% + 1, y% + windowheight% + 1, Store$
c.drawbox x%, y%, x% + windowlength% + 1, y% + windowheight% + 1, 32, ASC(a2$)
'Window Name
x1% = x% + windowlength% + 1
c.writestring x%, y%, a2$ + "É" + CHR$(0)
c.writestring x% + 1, y%, a3$ + a1$ + CHR$(0)
c.writestring x% + LEN(a1$) + 1, y%, a2$ + STRING$(windowlength% - LEN(a1$), "Í") + "»" + CHR$(0)
c.writestring x%, y% + 1, a2$ + "Ç" + STRING$(windowlength%, "Ä") + "¶" + CHR$(0)
boxbound$ = a2$ + "º" + CHR$(0)

'Design window text(if present)
a1$ = LEFT$(inf$, INSTR(inf$, "|") - 1)
IF (a1$ = "") THEN GOTO window1
a3$ = LEFT$(a1$, 1)
a1$ = RIGHT$(a1$, LEN(a1$) - 1)
inf$ = RIGHT$(inf$, LEN(inf$) - INSTR(inf$, "|"))
a1% = 1
a2% = 2
DO
a3% = INSTR(a1%, a1$, "~")
c.writestring x%, y% + a2%, boxbound$
c.writestring x% + 1, y% + a2%, a3$ + MID$(a1$, a1%, a3% - a1%) + CHR$(0)
c.writestring x1%, y% + a2%, boxbound$
a1% = a3% + 1
a2% = a2% + 1
LOOP UNTIL INSTR(a1%, a1$, "~") = 0
y1% = y% + a2%

'Input Boxes
window1:
a1$ = LEFT$(inf$, INSTR(inf$, "|") - 1)
inf$ = RIGHT$(inf$, LEN(inf$) - LEN(a1$) - 1)
IF (a1$ = "") THEN GOTO window2
a3$ = LEFT$(a1$, 1)
a4$ = MID$(a1$, 2, 1)
Inputboxattr% = ASC(a4$)
a1$ = RIGHT$(a1$, LEN(a1$) - 2)
a1% = 1
a2% = 0
Inputboxstart% = y1%
DIM Inputboxx%(c.stringcount%(a1$, ASC("~")) - 1)
a4% = 0
DO
a3% = INSTR(a1%, a1$, "~")
a5$ = MID$(a1$, a1%, a3% - a1%)
c.writestring x%, y1% + a2%, boxbound$
c.writestring x% + LEN(a5$) + 1, y1% + a2%, a4$ + "Ú" + STRING$(windowlength% - LEN(a5$) - 2, "Ä") + "¿" + CHR$(0)
c.writestring x1%, y1% + a2%, boxbound$
c.writestring x%, y1% + a2% + 1, boxbound$
c.writestring x% + 1, y1% + a2% + 1, a3$ + a5$ + CHR$(0)
c.writestring x% + LEN(a5$) + 1, y1% + a2% + 1, a4$ + "³" + SPACE$(windowlength% - LEN(a5$) - 2) + "³" + CHR$(0)
Inputboxx%(a4%) = x% + LEN(a5$) + 2
c.writestring x1%, y1% + a2% + 1, boxbound$
c.writestring x%, y1% + a2% + 2, boxbound$
c.writestring x% + LEN(a5$) + 1, y1% + a2% + 2, a4$ + "À" + STRING$(windowlength% - LEN(a5$) - 2, "Ä") + "Ù" + CHR$(0)
c.writestring x1%, y1% + a2% + 2, boxbound$
a2% = a2% + 3
a1% = a3% + 1
a4% = a4% + 1
LOOP UNTIL INSTR(a1%, a1$, "~") = 0
y1% = y1% + a2%
Inputboxno% = a4%
Inputboxend% = y1% - 1

'checkmark box
window2:
a1$ = LEFT$(inf$, INSTR(inf$, "|") - 1)
inf$ = RIGHT$(inf$, LEN(inf$) - LEN(a1$) - 1)
IF (a1$ = "") THEN GOTO window3
a3$ = LEFT$(a1$, 1)
a4$ = MID$(a1$, 2, 1)
a1$ = RIGHT$(a1$, LEN(a1$) - 2)
a1% = 1
a2% = 0
Checkmarkstart% = y1%
Checkmarkno% = 0
a4% = 0
DO
a3% = INSTR(a1%, a1$, "~")
c.writestring x%, y1% + a2%, a2$ + "º" + CHR$(0)
c.writestring x% + 1, y1% + a2%, a4$ + "[ ]" + CHR$(0)
c.writestring x% + 4, y1% + a2%, a3$ + MID$(a1$, a1%, a3% - a1%) + CHR$(0)
c.writestring x% + windowlength% + 1, y1% + a2%, a2$ + "º" + CHR$(0)
a4% = a4% + 1
a1% = a3% + 1
a2% = a2% + 1
LOOP UNTIL INSTR(a1%, a1$, "~") = 0
y1% = y1% + a2%
Checkmarkno% = a4%
Checkmarkend% = y1% - 1

'Button
window3:
a1$ = LEFT$(inf$, INSTR(inf$, "|") - 1)
inf$ = RIGHT$(inf$, LEN(inf$) - LEN(a1$) - 1)
IF (a1$ = "") THEN GOTO window4
Buttonstart% = y1%
Buttonend% = Buttonstart% + 2
Buttonno% = c.stringcount%(a1$, ASC("~"))
DIM Buttonx%(Buttonno% - 1)
a1% = 1
a2% = 1
a4% = 0
a3$ = LEFT$(a1$, 1)
a4$ = MID$(a1$, 2, 1)
a1$ = RIGHT$(a1$, LEN(a1$) - 2)
c.writestring x%, y1%, boxbound$
c.writestring x1%, y1%, boxbound$
c.writestring x%, y1% + 1, boxbound$
c.writestring x1%, y1% + 1, boxbound$
c.writestring x%, y1% + 2, boxbound$
c.writestring x1%, y1% + 2, boxbound$
DO
a3% = INSTR(a1%, a1$, "~")
a5$ = MID$(a1$, a1%, a3% - a1%)
c.writestring x% + a2%, y1%, a3$ + "Ú" + STRING$(LEN(a5$), "Ä") + "¿" + CHR$(0)
c.writestring x% + a2%, y1% + 1, a3$ + "³" + CHR$(0)
c.writestring x% + a2% + 1, y1% + 1, a4$ + a5$ + CHR$(0)
c.writestring x% + a2% + 1 + LEN(a5$), y1% + 1, a3$ + "³" + CHR$(0)
c.writestring x% + a2%, y1% + 2, a3$ + "Ô" + STRING$(LEN(a5$), "Í") + "¾" + CHR$(0)
a1% = a3% + 1
a2% = a2% + LEN(a5$) + 2
Buttonx%(a4%) = x% + a2%
a4% = a4% + 1
LOOP UNTIL INSTR(a1%, a1$, "~") = 0
y1% = y1% + 3

window4:
'End
c.writestring x%, y1%, a2$ + "È" + STRING$(windowlength%, "Í") + "¼" + CHR$(0)

mouse.show
boxactive% = 0
boxselect% = -1
Buttonselect% = 0
DIM Inputbox$(Inputboxno%), Checkmark%(Checkmarkno%)
'Now, get input
DO
        k$ = ""
        c.clearkey
        mouse.status
        WHILE Jerry%(4) = 0 AND Jerry%(5) = 0 AND k$ = ""
        mouse.status
        k$ = INKEY$
        WEND

'Workout keys
SELECT CASE k$
        CASE CHR$(esc)
        EXIT DO
        CASE CHR$(htab)
        boxactive% = 1
        boxselect% = (boxselect% + 1) MOD Inputboxno%
        Jerry%(1) = boxselect% * 3 + Inputboxstart% + 1
        CASE ELSE
END SELECT

'MouseCheck
IF (Jerry%(0) < x% OR Jerry%(0) > x1% OR Jerry%(4) = 0) THEN GOTO windowm1
'InputBox Check
        IF (Inputboxno% > 0) THEN
                IF (Jerry%(1) >= Inputboxstart% AND Jerry%(1) <= Inputboxend%) THEN
                a1% = Jerry%(1) - Inputboxstart%
                IF (a1% MOD 3 = 1) THEN
                boxselect% = (Jerry%(1) - Inputboxstart%) \ 3
                boxactive% = 1
                END IF
                END IF
        END IF

        IF (Checkmarkno% > 0) THEN
                IF (Jerry%(1) >= Checkmarkstart% AND Jerry%(1) <= Checkmarkend%) THEN
                a1% = Jerry%(1) - Checkmarkstart%
                Checkmark%(a1%) = NOT (Checkmark%(a1%)) AND 1
                mouse.hide
                c.writestring x% + 2, Jerry%(1), a2$ + CHR$(15) + CHR$(0)
                snd.click
                IF (Checkmark%(a1%) = 1) THEN a3$ = CHR$(7) ELSE a3$ = " "
                c.writestring x% + 2, Jerry%(1), a2$ + a3$ + CHR$(0)
                snd.click
                mouse.show
                END IF
        END IF

        IF (Buttonno% > 0) THEN
                IF (Jerry%(1) >= Buttonstart% AND Jerry%(1) <= Buttonend%) THEN
                FOR i% = 0 TO UBOUND(Buttonx%)
                IF (i% = 0) THEN a1% = x% + 1 ELSE a1% = Buttonx%(i% - 1) + 1
                IF (Jerry%(0) >= a1% AND Jerry%(0) < Buttonx%(i%)) THEN
                        Buttonselect% = i% + 1
                        EXIT FOR
                END IF
                NEXT
                END IF
        END IF

windowm1:
'InputBox Usage
IF (boxactive% = 1) THEN
boxactive% = 0
a2% = Inputboxx%(boxselect%)
a3% = x1% - a2% - 2
mouse.hide
Inputbox$(boxselect%) = c.input$(a2%, Jerry%(1), CHR$(Inputboxattr%), a3%, Inputbox$(boxselect%))
mouse.show
END IF

IF (Buttonselect% > 0) THEN EXIT DO
LOOP

mouse.hide
c.drawbox x%, y%, x% + windowlength% + 1, y% + windowheight% + 1, 178, ASC(a2$)
snd.click
c.drawbox x%, y%, x% + windowlength% + 1, y% + windowheight% + 1, 177, ASC(a2$)
snd.click
c.drawbox x%, y%, x% + windowlength% + 1, y% + windowheight% + 1, 176, ASC(a2$)
snd.click
c.putarea x%, y%, Store$
mouse.show

a1$ = k$ + "ð" + CHR$(Buttonselect%) + "ð"
FOR i% = 0 TO Checkmarkno% - 1
a1$ = a1$ + CHR$(Checkmark%(i%)) + "þ"
NEXT
a1$ = a1$ + "ð"
FOR i% = 0 TO Inputboxno% - 1
a1$ = a1$ + Inputbox$(i%) + "þ"
NEXT
a1$ = a1$ + "ð"
win.window$ = a1$
END FUNCTION

SUB zap.error
SHARED Errors%
IF (Errors% = 0) THEN GOTO errore
SELECT CASE Errors%
CASE 1
Error$ = "Data string cannot be extended any furthur"
CASE 2
Error$ = "Data string cannot be decreased any furthur"
CASE 3
Error$ = "Tried to delete text more than actually available"
CASE 4
Error$ = "Tried to add text more than possible"
CASE 5
Error$ = "Read position unavailable"
CASE 6
Error$ = "Tried to get a string beyond its length"
CASE 7
Error$ = "Cannot add any more text blocks"
CASE 8
Error$ = "So many new text blocks cannot be added"
CASE 9
Error$ = "Atleast one text block should be present"
CASE 10
Error$ = "Cannot remove so many text blocks"
CASE 11
Error$ = "No more text blocks cannot be inserted"
CASE 12
Error$ = "Requested text block is unavailable"
CASE ELSE
END SELECT

errore:
END SUB

